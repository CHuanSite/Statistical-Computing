library(tidyr)
library(readr)
library(magrittr)
#' An S4 class to represent the longitudinal data
#'
#' @slot id numeric type
#' @slot visit numeric type
#' @slot room character type
#' @slot value numeric type
#' @slot timepoint numeric type
setClass("LongitudinalData", slots = c(id = "numeric",
visit = "numeric",
room = "character",
value = "numeric",
timepoint = "numeric")
)
#' An S4 class to represent the longitudinal data after projection
#'
#' @slot s numeric type for selected id
#' @slot v numeric type for selected visit
#' @slot r character type for selected room
#' @description It's inherit from Longitudinal data type
setClass("ld_project", representation(s="numeric", v="numeric", r="character"),
contains = "LongitudinalData",
prototype(s=NA_real_, v=NA_integer_, r=NA_character_))
#' An S4 class to represent the summary of data
#'
#' @slot summary_array numeric vector for summary statistics
#' @slot summary_table a data frame for summary data
setClass("ld_summary", representation(summary_array = "numeric",
summary_table = "data.frame"),
prototype(summary_array = c()))
#make_LD  subject  visit  room
#' A method to make a LongitudinalData class from given data
#'
#' @param  data  a data that have `id`, `visit`, `room`, `value` and `timepoint`
setGeneric("make_LD", function(data) {
standardGeneric("make_LD")
})
setMethod("make_LD", "data.frame",
function(data){
new("LongitudinalData",
id = as.numeric(data["id"]$id),
visit = as.numeric(data["visit"]$visit),
room = as.character(data["room"]$room),
value = as.numeric(data["value"]$value),
timepoint = as.numeric(data["timepoint"]$timepoint))
})
#' A print method to show the number of different IDs in a LongitudinalData class
#'
#' @param  x the LongitudinalData class
setMethod("print", "LongitudinalData",
function(x, ...) {
cat(sprintf("Longitudinal dataset with %d subjects\n", length(unique(x@id))))
})
#' A print method to show the projected `id`, `visit` and `room` of a ld_project class
#'
#' @param  x  the ld_project class
setMethod("print", "ld_project",
function(x, ...) {
s = x@s
v = x@v
r = x@r
if(!is.na(s) & is.na(v) & is.na(r)){
if(length(x@id) > 0) cat(sprintf("Subject ID: %s\n", s))
else cat("NULL\n")
}
else{
if(!is.na(s)) cat(sprintf("ID: %s\n", s))
if(!is.na(v)) cat(sprintf("Visit: %s\n", v))
if(!is.na(r)) cat(sprintf("Room: %s\n", r))
}
if(is.na(s) & is.na(s) & is.na(s)) cat("NULL\n")
})
#' A print method to show the summary of a ld_summary class
#'
#' @param  x  the ld_summary class
setMethod("print", "ld_summary",
function(x, ...) {
n = length(x@summary_array)
if(n == 1){
cat(sprintf("%s: %s\n", names(x@summary_array), x@summary_array[1]))
print(x@summary_table)
}
else{
cat(sprintf("%s: %s\n", names(x@summary_array)[1], x@summary_array[1]))
print(x@summary_array[2:n])
}
})
#' A method to project the data into given `id`
#'
#' @param data the data to be projected
#' @param id the given `id`
setGeneric("subject", function(data, id) {
standardGeneric("subject")
})
setMethod("subject", "ld_project",
function(data, id) {
out = new("ld_project")
out@s = id
if(!is.na(data@v)) out@v = data@v
if(!is.na(data@r)) out@r = data@r
out@id = data@id[data@id == id]
out@visit = data@visit[data@id == id]
out@room = data@room[data@id == id]
out@value = data@value[data@id == id]
out@timepoint = data@timepoint[data@id == id]
return(out)
})
setMethod("subject", "LongitudinalData",
function(data, id){
aux = new("ld_project", id = data@id,
visit = data@visit,
room = data@room,
value = data@value,
timepoint = data@timepoint)
subject(aux, id)
})
#' A method to project the data into given `visit`
#'
#' @param data the data to be projected
#' @param id the given `visit`
setGeneric("visit", function(data, visit) {
standardGeneric("visit")
})
setMethod("visit", "ld_project",
function(data, visit) {
out = new("ld_project")
out@v = visit
if(!is.na(data@s)) out@s = data@s
if(!is.na(data@r)) out@r = data@r
out@id = data@id[data@visit == visit]
out@visit = data@visit[data@visit == visit]
out@room = data@room[data@visit == visit]
out@value = data@value[data@visit == visit]
out@timepoint = data@timepoint[data@visit == visit]
return(out)
})
setMethod("visit", "LongitudinalData",
function(data, visit){
aux = new("ld_project", id = data@id,
visit = data@visit,
room = data@room,
value = data@value,
timepoint = data@timepoint)
visit(aux, visit)
})
#' A method to project the data into given `room`
#'
#' @param data the data to be projected
#' @param room the given `room`
setGeneric("room", function(data, room) {
standardGeneric("room")
})
setMethod("room", "ld_project",
function(data, room) {
out = new("ld_project")
out@r = room
if(!is.na(data@s)) out@s = data@s
if(!is.na(data@v)) out@v = data@v
out@id = data@id[data@room == room]
out@visit = data@visit[data@room == room]
out@room = data@room[data@room == room]
out@value = data@value[data@room == room]
out@timepoint = data@timepoint[data@room == room]
return(out)
})
setMethod("room", "LongitudinalData",
function(data, room){
aux = new("ld_project", id = data@id,
visit = data@visit,
room = data@room,
value = data@value,
timepoint = data@timepoint)
room(aux, room)
})
#' A summary method to summarize the longitudinal data type
#'
#' @param object the data to be summarize
setMethod("summary", "ld_project",
function(object){
data = object
s = data@s
v = data@v
r = data@r
out = new("ld_summary")
if(!is.na(s) & is.na(v) & is.na(r)){
out@summary_array = c(out@summary_array, s)
names(out@summary_array) = c(names(out@summary_array), "ID")
d = data.frame(visit = data@visit, room = data@room, value = data@value)
out@summary_table = d %>%
group_by(visit,room) %>%
summarize(mean = mean(value)) %>%
spread(room, mean) %>%
data.frame()
return(out)
}
else if(!is.na(s) & !is.na(v) & !is.na(r)){
out@summary_array = c(out@summary_array, s)
names(out@summary_array)[1] = "ID"
out@summary_array = c(out@summary_array, min(data@value))
names(out@summary_array)[2] = "Min."
out@summary_array = c(out@summary_array, quantile(data@value, 0.25))
names(out@summary_array)[3] = "1st Qu."
out@summary_array = c(out@summary_array, median(data@value))
names(out@summary_array)[4] = "Median"
out@summary_array = c(out@summary_array, mean(data@value))
names(out@summary_array)[5] = "Mean"
out@summary_array = c(out@summary_array, quantile(data@value, 0.75))
names(out@summary_array)[6] = "3rd Qu."
out@summary_array = c(out@summary_array, max(data@value))
names(out@summary_array)[7] = "Max."
return(out)
}
else{
stop("The question didn't specify what should be done in this situation\n")
}
})
library(dplyr)
library(tidyr)
library(readr)
MIE <-read_csv("MIE.zip")
setwd("~/Documents/桌面整理/签证/JHU/First Year/Term1/Statistical Computing/HW3")
x <- make_LD(MIE)
MIE <-read_csv("MIE.zip")
x <- make_LD(MIE)
print(x)
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54)
out %>% summary
out <- subject(x, 14)
out %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
#' @import dplyr
#' @import tidyr
#' @import methods
#' @importFrom stats median quantile
NULL
#' Class for LongitudinalData
#'
#' This is the class for LongitudinalData
setClass("LongitudinalData",
slots = list(data = "data.frame",
subject.num = "numeric",
visit.num = "numeric",
room.num = "numeric",
is.subject = "logical",
is.visit = "logical",
is.room = "logical",
room.ID = "character",
visit.ID = "numeric",
subject.ID = "numeric",
is.summary = "logical"
)
)
#' Generic Function for subject
#'
#' This is the generic function for subject method
#'
#' @param x It's the Longitudinal object that user wants to investigate
#'
#' @param ... It's the query id that will be used
setGeneric("subject", function(x, ...){
standardGeneric("subject")
})
#' Generic Function for visit
#'
#'This is the generic function for visit method
#'
#' @param x It's the Longitudinal object that user wants to investigate
#'
#' @param ... It's the query id that will be used
setGeneric("visit", function(x,...){
standardGeneric("visit")
})
#' Generic Function for visit
#'
#'This is the generic function for room method
#'
#' @param x It's the Longitudinal object that user wants to investigate
#'
#' @param ... It's the query id that will be used
setGeneric("room",function(x,...){
standardGeneric("room")
})
#' Construct a LongitudinalData object
#'
#' This is a function that take a dataframe as a parameter, and then use the
#' default setting to return a LongitudinalData object.
#'
#' @param x A dataframe that users want to convert it into a LongitudinalData object
#'
#' @return This function returns a LongitudinalData object
#'
#' @export
make_LD <- function(x){
subject.tmp = x %>% select(id) %>% table %>%length
visit.tmp = x %>% select(visit) %>% table %>%length
room.tmp = x %>% select(room) %>% table %>%length
new("LongitudinalData",
data = x,
subject.num = subject.tmp,
visit.num = visit.tmp,
room.num = room.tmp,
is.subject = FALSE,
is.visit = FALSE,
is.room = FALSE,
is.summary= FALSE
)
}
#' Extract a subject from the whole LongitudinalData object
#'
#' This is a function that take a LongitudinalData object as a parameter, and then use the
#' query parameter to find the correspongding subject
#'
#' @param x A LongitudinalData object that users want to extract specific samples from
#' @param query The specific subject that the user wants to know
#'
#' @return This function returns a LongitudinalData object for the specific subject
#'
#' @export
setMethod("subject",
c(x = "LongitudinalData"),
function(x, query){
new("LongitudinalData",
data= x@data %>% filter(id == query),
subject.ID = query,
room.ID = x@room.ID,
visit.ID = x@visit.ID,
is.subject = TRUE,
is.room = x@is.room,
is.visit = x@is.visit,
is.summary = x@is.summary
)
}
)
#' Extract a visit from the whole LongitudinalData object
#'
#' This is a function that take a LongitudinalData object as a parameter, and then use the
#' query parameter to find the correspongding visit
#'
#' @param x A LongitudinalData object that users want to extract specific samples from
#' @param query The specific visit that the user wants to know
#'
#' @return This function returns a LongitudinalData object for the specific visit
#'
#' @export
setMethod("visit",
c(x = "LongitudinalData"),
function(x, query){
new("LongitudinalData",
data= x@data %>% filter(visit == query),
visit.ID = query,
room.ID = x@room.ID,
subject.ID = x@subject.ID,
is.visit = TRUE,
is.room = x@is.room,
is.subject = x@is.subject,
is.summary = x@is.summary
)
}
)
#' Extract a room from the whole LongitudinalData object
#'
#' This is a function that take a LongitudinalData object as a parameter, and then use the
#' query parameter to find the correspongding room
#'
#' @param x A LongitudinalData object that users want to extract specific samples from
#' @param query The specific room that the user wants to know
#'
#' @return This function returns a LongitudinalData object for the specific room
#'
#' @export
setMethod("room",
c(x = "LongitudinalData"),
function(x, query){
new("LongitudinalData",
data= x@data %>% filter(room == query),
room.ID = query,
subject.ID = x@subject.ID,
visit.ID = x@visit.ID,
is.room = TRUE,
is.visit = x@is.visit,
is.subject = x@is.subject,
is.summary = x@is.summary
)
}
)
#' Generic Function for summary
#'
#' This is the generic function for summary method
#'
#' @param x It's the LongitudinalData that will be used
setGeneric("summary",function(x){
standardGeneric("summary")
})
#' Obtain the summary result for a LongitudinalData object
#'
#' If the LongitudinalData object is the result of one query, such as a certain subject, a certain visit or a certain room,
#' then the summary result will be a spread table of the values of the variable not included. For instance, if the object
#' is the result of querying a subject, then the summary result will be the spread table of visit and room. If the Longitud
#' inalData object is not the result of a single query, then the result of the summary will be the quantile of the values,
#' which includes 'Min.', '1st Qu.', "Median", "Mean", "3rd Qu.", 'Max.'.
#'
#' @param x a LongitudinalData object that the user wants to know its summary information
#'
#' @return This function returns a summary dataframe
#'
#' @export
setMethod("summary",
c(x = "LongitudinalData"),
function(x){
x@is.summary = TRUE
value = NULL
value.mean = NULL
if(x@is.subject == TRUE & x@is.room == FALSE & x@is.visit == FALSE){
x@data %>% select(visit, room, value) %>% group_by(room, visit) %>% summarize(value.mean = mean(value)) %>% spread(room, value.mean)
}else if(x@is.visit == TRUE & x@is.room == FALSE & x@is.subject ==FALSE){
x@data %>% select(id, room, value) %>% group_by(id, room) %>% summarize(value.mean = mean(value)) %>% spread(room, value.mean)
}else if(x@is.room == TRUE & x@is.visit == FALSE & x@is.subject ==FALSE){
x@data %>% select(id, visit, value) %>% group_by(id, visit) %>% summarize(value.mean = mean(value)) %>% spread(visit, value.mean)
}else{
x@data %>% summarize("Min." = min(value), "1st QU."= quantile(value, 0.25), "Median" = median(value), "3rd QU." = quantile(value, 0.75), "Max." = max(value) )
}
}
)
#'Generic function for print
#'
#'This is the generic function for print
#'
#' @param x It's the LongitudinalData that will be used
#'
#' @param ... the content that the user wants to print
setGeneric("print")
#' Print the LongitudinalData object
#'
#' If the LongitudinalData object is the result of one query, such as a certain subject, a certain visit or a certain room,
#' then the summary result will be a spread table of the values of the variable not included. For instance, if the object
#' is the result of querying a subject, then the summary result will be the spread table of visit and room. If the Longitud
#' inalData object is not the result of a single query, then the result of the summary will be the quantile of the values,
#' which includes 'Min.', '1st Qu.', "Median", "Mean", "3rd Qu.", 'Max.'.
#'
#' @param x a LongitudinalData object that the user wants to print
#'
#' @return This function has no return
#'
#' @export
setMethod("print",
c(x = "LongitudinalData"),
function(x){
if(x@is.room!= TRUE & x@is.subject!= TRUE & x@is.visit!= TRUE & x@is.summary != TRUE){
print(paste("Longitudinal dataset with", x@subject.num, "subjects"))
}
if(x@is.subject == TRUE & x@is.summary != TRUE){
if(nrow(x@data) == 0){
print(NULL)
}else{
print(paste("subject ID:", x@subject.ID))
}
}
if(x@is.visit == TRUE & x@is.summary != TRUE){
if(nrow(x@data) == 0){
print(NULL)
}else{
print(paste("visit ID:", x@visit.ID))
}
}
if(x@is.room == TRUE & x@is.summary != TRUE){
if(nrow(x@data) == 0){
print(NULL)
}else{
print(paste("room ID:", x@room.ID))
}
}
if(x@is.summary == TRUE){
print(paste("ID", (x@data %>% select(id))[1]))
print(x %>% summary)
}
})
library(dplyr)
library(tidyr)
library(readr)
MIE <-read_csv("MIE.zip")
x <- make_LD(MIE)
setwd("~/Documents/桌面整理/签证/JHU/First Year/Term1/Statistical Computing/HW3")
print(x)
out <- subject(x, 10)
MIE <-read_csv("MIE.zip")
x <- make_LD(MIE)
print(x)
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54)
out %>% summary
out <- subject(x, 14)
out %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd("~/Documents/桌面整理/签证/JHU/First Year/Term1/Statistical Computing/Homework3Chen")
setwd("~/Documents/桌面整理/签证/JHU/First Year/Term1/Statistical Computing")
