#' out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
#' print(out)
#'
#' @export
setMethod("summary",
c(x = "SelectionLD"),
function(x){
data <- data.frame(id = x@id, room = x@room, visit = x@visit, value = x@value)
value = NULL
value.mean = NULL
frame.yes = FALSE
table.yes = FALSE
results.frame = 0
results.table = 0
if(x@is.id == TRUE& x@is.visit == FALSE &x@is.room == FALSE){
results.frame <- data %>% select(visit, room, value) %>% group_by(room, visit) %>% summarize(value.mean = mean(value)) %>% spread(room, value.mean)
frame.yes = TRUE
}else if(x@is.visit == TRUE & x@is.room == FALSE & x@is.id ==FALSE){
results.frame <- data %>% select(id, room, value) %>% group_by(id, room) %>% summarize(value.mean = mean(value)) %>% spread(room, value.mean)
frame.yes = TRUE
}else if(x@is.room == TRUE & x@is.visit == FALSE & x@is.id ==FALSE){
results.frame <- data %>% select(id, visit, value) %>% group_by(id, visit) %>% summarize(value.mean = mean(value)) %>% spread(visit, value.mean)
frame.yes = TRUE
}else{
results.table <- c(min(data$value),quantile(data$value,0.25),median(data$value),mean(data$value),quantile(data$value,0.75),max(data$value))
results.table <- as.table(results.table)
names(results.table) <- c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max.")
table.yes = TRUE
}
results.frame <- as.data.frame(results.frame)
results.table <- as.table(round(results.table,2))
new("SummaryLD",
Table.Summary = results.table,
Frame.Summary = results.frame,
Frame.is = frame.yes,
Table.is = table.yes,
ID = data$id[1]
)
}
)
library(dplyr)
library(tidyr)
library(readr)
MIE <-read_csv("MIE.zip")
x <- make_LD(MIE)
print(x)
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
#' @import dplyr
#' @importFrom tidyr spread
#' @import methods
#' @importFrom stats median quantile
#' @import magrittr
NULL
#' Longitudinal Data Class
#'
#' The S4 class for longitudinal data
setClass("LongitudinalData",
slots = list(
id = "numeric",
visit = "numeric",
room = "character",
value = "numeric",
timepoint = "numeric"
)
)
#'Generic function for the constructor function make_LD
#'
#'Serve as the generic function for make_LD
#'
#'@param x a dataframe that will be used to generate LongitudinalData object
setGeneric("make_LD", function(x) {
standardGeneric("make_LD")
})
#' Constructor Function for LongitudinalData
#'
#' Take a data frame and use this dataframe to generate the Longitudinal Data Object
#'
#' @param x The input dataframe which will be tranformed into a longitudinal object
#'
#' @examples
#' x <- make_LD(data)
#' print(x)
#'
#' @export
setMethod("make_LD",
c(x = "data.frame"),
function(x){
new("LongitudinalData",
id = as.numeric(x$id),
visit = as.numeric(x$visit),
room = as.character(x$room),
value = as.numeric(x$value),
timepoint = as.numeric(x$timepoint)
)
}
)
#' SelectionLD class
#'
#' This class represents the LongitudinalData after doing the selection, which may be
#' the selection result of "id", "room" and "visit"
setClass("SelectionLD",
slots = list(
is.id = "logical",
is.visit = "logical",
is.room = "logical"
),
contains = "LongitudinalData"
)
#' SummaryLD class
#'
#' This class represents the summary results of the LongitudinalData, and
#' it will only be generated after the summary function
setClass("SummaryLD",
slots = list(
Table.is = "logical",
Frame.is = "logical",
Table.Summary = "table",
Frame.Summary = "data.frame",
ID = "numeric"
)
)
#' Generic function for subject
#'
#' subject function will filter the corresponding samples which match the id.tmp
#'
#' @param x the object that will be used to select the subjects
#' @param id.tmp the id that will be used to do the filter
setGeneric("subject", function(x, id.tmp){
standardGeneric("subject")
})
#' subject function for LongitudinalData object
#'
#' This method is for LongitudinalData object, and it will return a SelectionLD
#' object which is the result of filtering id.
#'
#' @param x the LongitudinalData object which will be filtered
#' @param id.tmp the id used to do the filter
#'
#' @examples
#' x <- make_LD(data)
#' out <- subject(x, 10)
#' print(out)
#'
#' @export
setMethod("subject",
c(x = "LongitudinalData"),
function(x, id.tmp){
index =(x@id == id.tmp)
new("SelectionLD",
id = x@id[index],
visit = x@visit[index],
room = x@room[index],
value = x@value[index],
timepoint = x@timepoint[index],
is.id = TRUE,
is.visit = FALSE,
is.room = FALSE
)
}
)
#' subject function for selectionLD object
#'
#' This method is for selectionLD object, and it will return a SelectionLD
#' object which is the result of filtering id.
#'
#' @param x the SelectionLD object which will be filtered
#' @param id.tmp the id used to do the filter
#'
#'@export
setMethod("subject",
c(x = "SelectionLD"),
function(x, id.tmp){
index =(x@id == id.tmp)
new("SelectionLD",
id = x@id[index],
visit = x@visit[index],
room = x@room[index],
value = x@value[index],
timepoint = x@timepoint[index],
is.id = TRUE,
is.visit = x@is.visit,
is.room = x@is.room)
}
)
#'Generic function for visit
#'visit function will filter the corresponding samples which match the visit.tmp
#'
#' @param x the object that will be used to select the subjects
#' @param visit.tmp the visit that will be used to do the filter
setGeneric("visit", function(x, visit.tmp){
standardGeneric("visit")
})
#' visit function for LongitudinalData object
#'
#' This method is for LongitudinalData object, and it will return a SelectionLD
#' object which is the result of filtering visit.tmp.
#'
#' @param x the LongitudinalData object which will be filtered
#' @param visit.tmp the visit used to do the filter
#'
#' @examples
#' x <- make_LD(data)
#' out <- visit(x, 0)
#' print(out)
#'
#' @export
setMethod("visit",
c(x = "LongitudinalData"),
function(x, visit.tmp){
index =(x@visit == visit.tmp)
new("SelectionLD",
id = x@id[index],
visit = x@visit[index],
room = x@room[index],
value = x@value[index],
timepoint = x@timepoint[index],
is.visit = TRUE,
is.room = FALSE,
is.id = FALSE
)
}
)
#' visit function for SelectionLD object
#'
#' This method is for SelectionLD object, and it will return a SelectionLD
#' object which is the result of filtering visit.tmp.
#'
#' @param x the SelectionLD object which will be filtered
#' @param visit.tmp the visit used to do the filter
#'
#' @export
setMethod("visit",
c(x = "SelectionLD"),
function(x, visit.tmp){
index =(x@visit == visit.tmp)
new("SelectionLD",
id = x@id[index],
visit = x@visit[index],
room = x@room[index],
value = x@value[index],
timepoint = x@timepoint[index],
is.id = x@is.id,
is.visit = TRUE,
is.room = x@is.room)
}
)
#' Generic function for room
#'
#' room function will filter the corresponding samples which match the room.tmp
#'
#' @param x the object that will be used to select the subjects
#' @param room.tmp the id that will be used to do the filter
setGeneric("room", function(x, room.tmp){
standardGeneric("room")
})
#' room function for LongitudinalData object
#'
#' This method is for LongitudinalData object, and it will return a SelectionLD
#' object which is the result of filtering room.tmp.
#'
#' @param x the LongitudinalData object which will be filtered
#' @param room.tmp the room used to do the filter
#'
#' @examples
#' x <- make_LD(data)
#' out <- room(x, "bedroom")
#' print(out)
#'
#' @export
setMethod("room",
c(x = "LongitudinalData"),
function(x, room.tmp){
index =(x@room == room.tmp)
new("SelectionLD",
id = x@id[index],
visit = x@visit[index],
room = x@room[index],
value = x@value[index],
timepoint = x@timepoint[index],
is.visit = FALSE,
is.room = TRUE,
is.id = FALSE
)
}
)
#' room function for SelectionLD object
#'
#' This method is for SelectionLD object, and it will return a SelectionLD
#' object which is the result of filtering room.tmp.
#'
#' @param x the SelectionLD object which will be filtered
#' @param room.tmp the room used to do the filter
#'
#' @export
setMethod("room",
c(x = "SelectionLD"),
function(x, room.tmp){
index =(x@room == room.tmp)
new("SelectionLD",
id = x@id[index],
visit = x@visit[index],
room = x@room[index],
value = x@value[index],
timepoint = x@timepoint[index],
is.id = x@is.id,
is.visit = x@is.visit,
is.room = TRUE
)
}
)
#' Print LongitudinalData Object
#'
#' This method will print the LongitudinalData object's information, the number of subjects in this dataset
#'
#' @param x the LongitudinalData object
#'
#' @examples
#' x <- make_LD(data)
#' print(x)
#'
#' @export
setMethod("print",
c(x = "LongitudinalData"),
function(x){
num = length(unique(x@id))
cat("Longitudinal dataset with",num,"subjects")
}
)
#' Print SelectionLD object
#'
#' Print the SelectionLD object, if there is no samples, it will print NULL; if it has samples, based on
#' whether it is from ID, Visit and Room, it will print certain information
#'
#' @param x The SelectionLD object
#'
#' @examples
#' x <- make_LD(data)
#' out <- subject(x, 10)
#' print(out)
#' out <- subject(x, 14)
#' print(out)
#' out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
#' print(out)
#' @export
setMethod("print",
c(x = "SelectionLD"),
function(x){
if( length(x@id) == 0){
return()
}
if( x@is.id == TRUE & x@is.visit == FALSE & x@is.room == FALSE){
cat("Subject ID:", x@id[1],"\n")
}else{
if( x@is.id == TRUE){
cat("ID:", x@id[1],"\n")
}
if( x@is.visit == TRUE){
cat("Visit:", x@visit[1],"\n")
}
if( x@is.room == TRUE){
cat("Room:", x@room[1],"\n")
}
}
}
)
#' Print SummaryLD object
#'
#' It will print the summary results from the SummaryLD result
#'
#' @param x The SummaryLD object that will be used
#'
#' @examples
#' x <- make_LD(data)
#' out <- subject(x, 54) %>% summary
#' print(out)
#' out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
#' print(out)
#'
#' @export
setMethod("print",
c(x = "SummaryLD"),
function(x){
if(x@Table.is == TRUE){
cat("ID:", x@ID[1],"\n")
print(x@Table.Summary)
}else{
cat("ID:", x@ID[1],"\n")
print(x@Frame.Summary)
}
}
)
#' Generic function for summary
#'
#' As the generic function for summary
#'
#' @param x the object that is used to do the summary
setGeneric("summary", function(x){
standardGeneric("summary")
})
#' Summary function for SelectionLD object
#'
#' This function will produce summary result for the SelectionLD object, for different
#' combinations of ID, Visit and Room, this function will output different kinds of
#' summary information
#'
#' @param x This SelectionLD object that will be used to generate summary information
#'
#' @examples
#' x <- make_LD(data)
#' out <- subject(x, 54) %>% summary
#' print(out)
#' out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
#' print(out)
#' out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
#' print(out)
#'
#' @export
setMethod("summary",
c(x = "SelectionLD"),
function(x){
data <- data.frame(id = x@id, room = x@room, visit = x@visit, value = x@value)
value = NULL
value.mean = NULL
frame.yes = FALSE
table.yes = FALSE
results.frame = 0
results.table = 0
if(x@is.id == TRUE& x@is.visit == FALSE &x@is.room == FALSE){
results.frame <- data %>% select(visit, room, value) %>% group_by(room, visit) %>% summarize(value.mean = mean(value)) %>% spread(room, value.mean)
frame.yes = TRUE
}else if(x@is.visit == TRUE & x@is.room == FALSE & x@is.id ==FALSE){
results.frame <- data %>% select(id, room, value) %>% group_by(id, room) %>% summarize(value.mean = mean(value)) %>% spread(room, value.mean)
frame.yes = TRUE
}else if(x@is.room == TRUE & x@is.visit == FALSE & x@is.id ==FALSE){
results.frame <- data %>% select(id, visit, value) %>% group_by(id, visit) %>% summarize(value.mean = mean(value)) %>% spread(visit, value.mean)
frame.yes = TRUE
}else{
results.table <- c(min(data$value),quantile(data$value,0.25),median(data$value),mean(data$value),quantile(data$value,0.75),max(data$value))
results.table <- as.table(results.table)
names(results.table) <- c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max.")
table.yes = TRUE
}
results.frame <- as.data.frame(results.frame)
results.table <- as.table(round(results.table,2))
new("SummaryLD",
Table.Summary = results.table,
Frame.Summary = results.frame,
Frame.is = frame.yes,
Table.is = table.yes,
ID = data$id[1]
)
}
)
library(dplyr)
library(tidyr)
library(readr)
MIE <-read_csv("MIE.zip")
x <- make_LD(MIE)
print(x)
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
library(dplyr)
library(tidyr)
library(readr)
MIE <-read_csv("MIE.zip")
x <- make_LD(MIE)
print(x)
I
I
MIE <-read_csv("MIE.zip")
x <- make_LD(MIE)
print(class(x))
print(x)
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
